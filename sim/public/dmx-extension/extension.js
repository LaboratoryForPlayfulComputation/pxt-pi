var extId = window.location.hash.substr(1);
var hosted = false;
var idToType = {};
var usercode = {};
usercode["animations"] = {test1: [], test2: [], test3: []}

function receiveMessage(ev) {
    var msg = ev.data;
    var action = idToType[msg.id];
    if (action) {
        console.debug('dmxeditor received ' + action);
        switch (action) {
            case "extinit":
                hosted = true;
                console.log('host connection completed')
                sendRequest("extreadusercode");
                break;
            case "extreadusercode":
                usercode = msg.resp || {};
                break;
        }
        delete idToType[msg.id];
    }
}

function mkRequest(action) {
    var id = Math.random().toString();
    idToType[id] = action;
    return {
        type: "pxtpkgext",
        action: action,
        extId: extId,
        response: true,
        id: id
    }
}

function isIFrame() {
    try {
        return window && window.self !== window.top;
    } catch (e) {
        return true;
    }
}

function sendRequest(action, body) {
    if (!isIFrame()) return;
    var msg = mkRequest(action);
    msg.body = body;
    window.parent.postMessage(msg, "*");
}

function saveUserCode(fileName, out) {     
    console.log("saving user code...");       
    usercode[fileName.toLowerCase()] = out;
    usercode["patterns"] = patternsToJson();
    var ts = renderUserCode();
    sendRequest("extwritecode", {
        code: ts,
        json: JSON.stringify(usercode, null, 2)
    }) 
}

document.onreadystatechange = function (er) {
    if (document.readyState != "complete") return;
    window.addEventListener("message", receiveMessage, false);
    sendRequest("extinit")
}

//saveUserCode("test", "test");



function renderUserCode() {
    var ts = `
// This file was autogenerated, do not edit...
namespace dmx { ` +

    `
    export enum Animations {
        //% block="test"
        test
    `
    Object.keys(usercode).forEach(function(k){
        if (k == "patterns") {
            var numKeys = Object.keys(usercode[k]).length;
            var count = 0;
            Object.keys(usercode[k]).forEach(function(m){
                if (count == numKeys-1) {
                    ts += 
                    `,
                    //% block="test${count}"`+
                    `
                    test${count}`
                } else {
                    ts += 
                    `//% block="test${count}"`+
                    `
                    test${count},
                    `
                }
            count += 1;
            });
        }
    });
    ts += 
    `
    }`

    ts += 
    `
    /*
    * Dmx test block
    */
    //% blockId="dmx_layout" block="dmx layout"  
    //% blockSetVariable=rig 
    export function dmxlayout(): Layout {
        return new Layout();
    }

    //% blockNamespace=dmx
    export class Layout {

        constructor() {}` 

    ts +=
        `
        /*
        * Dmx play animation test block
        * @param dmx layout to use, eg: dmx(rig)
        * @param animation to loop
        */
        //% blockId="dmx_playanimation" block="%dmx play animation %animation"  
        export function playAnimationTest(dmx: Layout, animation: Animations): void {}

        /*
        * Dmx loop animation test block
        * @param dmx layout to use, eg: dmx(rig)
        * @param animation to play
        */
        //% blockId="dmx_loopanimation" block="%dmx loop animation %animation"  
        export function loopAnimationTest(dmx: Layout, animation: Animations): void {}
        
        /*
        * Dmx stop animation test block
        * @param dmx layout to use, eg: dmx(rig)
        * @param animation to stop
        */
        //% blockId="dmx_stopanimation" block="%dmx stop animation %animation"  
        export function stopAnimationTest(dmx: Layout, animation: Animations): void {}`         
    
        ts += `
    }

}`

    console.log(ts);
    return ts;
}